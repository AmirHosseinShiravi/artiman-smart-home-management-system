version: '3.8'

services:
  web:
    build:
      context: ../webServices/
      dockerfile: Dockerfile.prod
    command: sh -c "python3 manage.py makemigrations --noinput && \
                    python3 manage.py migrate --noinput && \
                    python3 manage.py collectstatic --noinput && \
                    gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    expose:
      - 8000
    env_file:
      - ./envs/prod/django/.env
    depends_on:
      - db
      - emqx-mqtt-broker
    
  db:
    build:
      context: ./dockerfiles/prod/db/
    volumes:
      - postgres_data_volume:/var/lib/postgresql/data/
    env_file:
      - ./envs/prod/db/.env
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # nginx:
  #   container_name: nginx
  #   build:
  #     context: ./dockerfiles/prod/nginx/
  #   restart: always
  #   env_file:
  #     - ./envs/prod/nginx/.env
  #   ports:
  #     - 443:443
  #     - 80:80
  #   volumes:
  #     - static_volume:/home/app/web/staticfiles
  #     - media_volume:/home/app/web/mediafiles
  #     - certbot_www_volume:/vol/www/
  #     - proxy_dhparams:/vol/proxy
  #     - certbot_certs_volume:/etc/letsencrypt/

  #   depends_on:
  #     - backend

  # certbot:
  #   build: 
  #     context: ./dockerfiles/prod/certbot/
  #   command: echo "Skipping..."
  #   container_name: certbot
  #   env_file:
  #     - ./envs/prod/nginx/.env
  #   volumes: 
  #     - certbot_www_volume:/vol/www/
  #     - certbot_certs_volume:/etc/letsencrypt/
  #   depends_on:
  #     - nginx

  nginx-proxy:
    container_name: nginx-proxy
    build:
      context: ./dockerfiles/prod/nginx/
    restart: always
    env_file:
      - ./envs/prod/nginx/.env
    ports:
      - 80:80
      - 443:443
      - 1883:1883
      - 8883:8883
      - 8083:8083 
      - 8084:8084
      - 8888:8888 # nginx status
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      # - toplevel_nginx_conf:/etc/nginx/toplevel.conf.d/
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - web
  
  acme-companion:
    image: nginxproxy/acme-companion
    env_file:
      - ./envs/prod/proxy-companion/.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy


  emqx-mqtt-broker:
    image: emqx/emqx:5.8
    container_name: emqx-mqtt-broker
    env_file:
      - ./envs/prod/emqx-broker/.env
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      # - certs:/etc/nginx/certs
      # - html:/usr/share/nginx/html
      # - vhost:/etc/nginx/vhost.d
      # - acme:/etc/acme.sh
      # - toplevel_nginx_conf:/etc/nginx/toplevel.conf.d/
      - vol-emqx-broker-data:/opt/emqx/data
      - vol-emqx-broker-log:/opt/emqx/log
    depends_on:
      - db

volumes:
  postgres_data_volume:
    name: postgres-data
  static_volume:
  media_volume:
  certs:
  html:
  vhost:
  acme:
  # toplevel_nginx_conf:
  vol-emqx-broker-data:
    name: emqx-broker-data
  vol-emqx-broker-log:
    name: emqx-broker-log

# networks:
#   db_network:
#     driver: bridge
#   web_network:
#     driver: bridge
#   mqtt_network:
#     driver: bridge
